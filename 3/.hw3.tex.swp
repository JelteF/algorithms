\documentclass[11pt]{article}

\usepackage{hyperref}
\usepackage{amsmath}
\usepackage{enumerate}
\usepackage[utf8]{inputenc}
\usepackage{qtree}


\newcommand{\bigO}{\ensuremath{\mathcal{O}}}

\title{\textbf{Algoritmen en Complexiteit HW 3}}
\author{Jelte Fennema (10183159)\\
		Jaap Koetsier (10440615)\\
        Abe Wiersma (10433120)}
\date{14 februari 2014}

\begin{document}

\maketitle

\begin{enumerate}
    \item We beginnen met een lege tabel met op de horizontale kant de cijfers $0, 2, ..., m$,
    	waarbij $m$ de lengte van string $X$ is. Op de verticale kant zetten we de cijfers
    	$0, 1, 2, ..., n$, met n de lengte van string $Y$. We beginnen links bovenin, en kijken
    	naar de het vakje rechts (positie $1$ van string $X$, $0$ van string $Y$), en we kijken
    	of in string $X$ op positie $1$ hetzelfde karakter staat als in onze string $Z$ op
    	positie $1$ (we zitten in vakje $0, 1 => 0 + 1 = 1$). Wanneer dit het geval is zetten we
    	$1$ in het vakje, de lengte van onze gecontroleerde string op dit moment. Wanneer de
    	karakters niet overeen komen zetten we hier een $x$ in het vakje en kijken
    	we naar het vakje onder het huidige vakje ($1,0$) en vergelijken we het eerste karakter
    	van string $Y$. Vanuit een ingevuld vakje kijken we alleen naar de volgende rij of kolom,
    	nooit terug. De huidige posities in de strings $X$ en $Y$ zijn af te lezen in de boven-
    	en zijkant van de tabel, de som van deze is de te vergelijken positie in $Z$. Wanneer
    	we aangekomen zijn in $n, m$ (en op het laatste karakter van string $Z$) hebben we
    	een match. Wanneer we ergens stranden op een vakje waarbij we zowel rechts als onder
    	geen match hebben is het algoritme klaar en hebben we geen match.\\
    	Het voorbeeld uit de opgave geeft de volgende tabel:

\begin{table}[h]
\centering
\begin{tabular}{lllllllllll}
\hline
           & \textbf{0} & \textbf{1} & \textbf{2} & \textbf{3} & \textbf{4} & \textbf{5} & \textbf{6} & \textbf{7} & \textbf{8} & \textbf{9} \\ \hline
\textbf{0} & 0          & 1          & x          &            &            &            &            &            &            &            \\
\textbf{1} & 1          & 2          & 3          & 4          & 5          & 6          & x          &            &            &            \\
\textbf{2} & x          & 3          &            &            &            & 7          & x          &            &            &            \\
\textbf{3} &            &            &            &            &            & 8          & 9          & 10         & x          &            \\
\textbf{4} &            &            &            &            &            & x          &            & 11         & 12         & 13         \\
\textbf{5} &            &            &            &            &            &            &            & x &            & 14         \\ \hline
\end{tabular}
\end{table}



    \item
        Voor elke doos kijken we wat de maximale hoogte van de stapel is als
        deze bovenop staat. Dit doen we voor alle stapelhoogtes. Dit wordt
        gedaan door te kijken op welke van de stapels uit de vorige stapelhoogte
        hij geplaatst kan worden. Hij kan op een stapel geplaatst worden waar de
        doos nog niet in gebruikt is en de breedte en diepte van de bovenste
        doos niet groter is als zijn eigen breedte en diepte. Van deze gevonden
        stapels wordt de hoogste gekozen.

        Past hij niet op een stapel, dan is de hoogte van die stapel 0. Past hij
        wel op een stapel dan wordt zijn hoogte bij de hoogte van die stapel
        opgeteld.

        Aan het einde wordt gekeken welke van de stapels het hoogste is.

        De stapelhoogte is maximaal $n$, waarbij voor elke stapelhoogte voor
        alle $n$ dozen wordt gekeken op welke van de $n - 1$ lagere stapels hij
        past. Dit algorithme heeft dus complexiteit \bigO$(n^3)$.

    \item
        \begin{enumerate}
            \item
                Een voorbeeld is een balk van lengte 8 waar bij de sneden op
                posites 3, 4 en 5 gemaakt moeten worden.

                De door het algoritme gekozen volgorde zou zijn: $4, 3, 5$ of
                $4, 5, 3$. Dit komt uit op kosten van $8+4+4=16$. Terwijl het
                goedkoper zou zijn om in volgorde $3, 5, 4$ te zagen. Dit geeft
                de kosten $8+5+2=15$

            \item
                Voor 1 tot uiteindelijk aantal snedes kijken we wat de
                laagst mogelijke toevoeging aan de prijs. Dit doen we door te
                kijken naar de vorige kolom van de matrix naar alle rijen
                behalve zijn eigen. Hieruit kiest het algoritme de
                deelverzameling waarbij zijn snede de minste toevoeging geeft
                aan het totaal.
        \end{enumerate}

    \item
        \begin{enumerate}
            \item \Tree [.v [.1 [.2 [.3 [.4 [.5 [.n ]]]]]]]\\\\
            	Bij een depth-first-search worden alle knopen op de stack gezet totdat het eind bereikt wordt.
            	Bij deze graaf staan alle n knopen op de stack op het moment dat de search knoop $n$ bereikt	heeft. Omdat een BFS niet de breedte in kan bij deze graaf zal de queue nooit meer dan één knoop bevatten.\\
			\item \Tree [.v 1 2 3 4 5 ]\\\\
				Bij een breadth-first-search worden in dit geval alle knopen op de queue gezet. Een depth-first-search gaat niet dieper dan 1 knoop, dus de stack van de DFS zal in dit geval nooit meer dan één knoop ($v$) bevatten.
        \end{enumerate}

\end{enumerate}

\end{document}
